{"version":3,"sources":["styles/theme.jsx","styles/GlobalStyles.jsx","App.js","serviceWorker.js","index.js"],"names":["baseFonts","palette","primary","main","light","dark","secondary","success","error","disabled","typography","base","fontFamily","join","title","emoji","transition","duration","timingFunction","appDrawer","width","mobile","open","closed","desktop","GlobalStyles","createGlobalStyle","theme","props","WebFont","load","google","families","prodBasename","App","basename","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8RAAMA,EAAY,CAAC,SAAU,QAAS,cAEvB,GACbC,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,MAAO,UACPC,KAAM,WAERC,UAAW,CACTH,KAAM,UACNC,MAAO,UACPC,KAAM,WAERE,QAAS,CACPJ,KAAM,UACNC,MAAO,UACPC,KAAM,WAERG,MAAO,CACLL,KAAM,UACNC,MAAO,UACPC,KAAM,WAERI,SAAU,CACRN,KAAM,WAERO,WAAY,CACVN,MAAO,UACPC,KAAM,YAGVK,WAAY,CACVC,KAAM,CACJC,WAAYZ,EAAUa,KAAK,MAE7BC,MAAO,CACLF,WAAY,CAAC,cAAD,OAAkBZ,GAAWa,KAAK,OAGlDE,MAAO,eACPC,WAAY,CACVC,SAAU,OACVC,eAAgB,YAElBC,UAAW,CACTC,MAAO,CACLC,OAAQ,CACNC,KAAM,OACNC,OAAQ,KAEVC,QAAS,CACPF,KAAM,QACNC,OAAQ,Q,yaCnDhB,IA2BeE,EA3BMC,YAAH,IAEC,qBAAGC,MAAkBjB,WAAWC,KAAKC,YAC3C,qBAAGe,MAAkB1B,QAAQS,WAAWN,OAKlC,qBAAGuB,MAAkBjB,WAAWI,MAAMF,YAe5C,SAAAgB,GAAK,OAAIA,EAAMD,MAAM1B,QAAQC,QAAQG,OChBlDwB,IAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,yBAA0B,YAIzC,IACMC,EAAe,gCAoBNC,MAlBf,WACE,OACE,kBAAC,IAAD,CAAeP,MAAOA,GACpB,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CACEQ,SACyDF,GAGzD,kDACA,kGCjBJG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAApD,GACLgD,QAAQhD,MAAM,4CAA6CA,KC1FjEqD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,6BAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,6BAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MCvC/BE,K","file":"static/js/main.76cee8d7.chunk.js","sourcesContent":["const baseFonts = ['Roboto', 'Arial', 'sans-serif'];\n\nexport default {\n  palette: {\n    primary: {\n      main: '#efd71f',\n      light: '#fff8bf',\n      dark: '#59563d',\n    },\n    secondary: {\n      main: '#FFE2BC',\n      light: '#FFF9F0',\n      dark: '#C79349',\n    },\n    success: {\n      main: '#319F4A',\n      light: '#55D370',\n      dark: '#257134',\n    },\n    error: {\n      main: '#D34E41',\n      light: '#FF7365',\n      dark: '#953930',\n    },\n    disabled: {\n      main: '#7A7A7A',\n    },\n    typography: {\n      light: '#FFFFFF',\n      dark: '#020202',\n    },\n  },\n  typography: {\n    base: {\n      fontFamily: baseFonts.join(','),\n    },\n    title: {\n      fontFamily: ['Montserrat', ...baseFonts].join(','),\n    },\n  },\n  emoji: 'ðŸ¥¥',\n  transition: {\n    duration: '0.2s',\n    timingFunction: 'ease-out',\n  },\n  appDrawer: {\n    width: {\n      mobile: {\n        open: '90vw',\n        closed: '0',\n      },\n      desktop: {\n        open: '240px',\n        closed: '0',\n      },\n    },\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: ${({ theme }) => theme.typography.base.fontFamily};\n    color: ${({ theme }) => theme.palette.typography.light};\n    background-color: #1A1A1A;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: ${({ theme }) => theme.typography.title.fontFamily};\n    font-weight: 600;\n\n    svg {\n      vertical-align: middle;\n      margin-right: 0.3em;\n      margin-top: -0.5%;\n    }\n  }\n\n  h1, h2 {\n    font-weight: 700;\n  }\n\n  h3 {\n    color: ${props => props.theme.palette.primary.dark}\n  }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { ThemeProvider } from 'styled-components';\nimport WebFont from 'webfontloader';\n\nimport theme from './styles/theme';\nimport GlobalStyles from './styles/GlobalStyles';\n\nWebFont.load({\n  google: {\n    families: ['Montserrat:500,600,800', 'serif'],\n  },\n});\n\nconst devBasename = '/';\nconst prodBasename = '/sea-of-thieves-cooking-timer';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <GlobalStyles />\n        <BrowserRouter\n          basename={\n            process.env.NODE_ENV === 'development' ? devBasename : prodBasename\n          }\n        >\n          <h2>You're here early!</h2>\n          <p>Check back in a few days for a list of awesome Game Pass games.</p>\n        </BrowserRouter>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}